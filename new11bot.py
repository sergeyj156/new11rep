import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import sqlite3
import random
import pandas as pd

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '7152142719:AAEt-5t-ulWhc-BH_Szk5-zF46rgva-1FZA'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
storage = MemoryStorage()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryStorage
dp = Dispatcher(bot, storage=storage)
ADMIN_ID = [679030634, 927878071]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    points INTEGER DEFAULT 0
)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''CREATE TABLE IF NOT EXISTS codewords (
    code TEXT PRIMARY KEY,
    points INTEGER
)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''CREATE TABLE IF NOT EXISTS referrals (
    user_id INTEGER,
    referral_code TEXT,
    points INTEGER DEFAULT 150,
    invited_user_id INTEGER,
    status TEXT DEFAULT 'pending'
)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''CREATE TABLE IF NOT EXISTS user_codewords (
    user_id INTEGER,
    code TEXT
)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''CREATE TABLE IF NOT EXISTS user_answers (
    user_id INTEGER,
    question TEXT,
    answer TEXT
)''')
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
menu_markup = InlineKeyboardMarkup(row_width=2)
menu_markup.add(
    InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ü§ì', callback_data='rules'),
    InlineKeyboardButton('–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è', callback_data='channels'),
    InlineKeyboardButton('–ú–æ–∏ –±–∞–ª–ª—ã', callback_data='points'),
    InlineKeyboardButton('–†–µ–π—Ç–∏–Ω–≥ üî•', callback_data='rating'),
    InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã', callback_data='get_points'),
    InlineKeyboardButton('–ê—á–∏–≤–∫–∏ –º–µ—Å—è—Ü–∞ üéÅ', callback_data='achievements'),
    InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help'),
    InlineKeyboardButton('100–±–∞–ª–ª—å–Ω—ã–π –º—ç—Ç—á ‚ù§Ô∏è', callback_data='match')
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
user_message_ids = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–•—ç–π! –¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é –±–æ—Ç–∞ –õ–µ—Ç–Ω–µ–≥–æ –ª–∞–≥–µ—Ä—è 100–±–∞–ª–ª—å–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ ‚òÄÔ∏è\n\n"
                         "–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ç—ã –±—ã—Å—Ç—Ä–µ–µ –≤–∫–ª—é—á–∏–ª—Å—è –≤ –∏–≥—Ä—É\n\n"
                         "–£–¥–∞—á–∏ üòâ\n\n"
                         "–í–∞–∂–Ω–æ! –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –±—ã–ª —é–∑–µ—Ä–Ω–µ–π–º, —Ç.–µ. —Ç–µ–±—è –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ ¬´@¬ª. "
                         "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–≤—è–∑–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞", reply_markup=menu_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'rules')
async def show_rules(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    media = []
    files = []
    for i in range(1, 6):
        file = open(f'foto_lee/{i}.jpg', 'rb')
        files.append(file)
        media.append(InputMediaPhoto(file))

    message_ids = []

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
    media_messages = await bot.send_media_group(callback_query.from_user.id, media)
    for msg in media_messages:
        message_ids.append(msg.message_id)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤
    for file in files:
        file.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    rules_message = await bot.send_message(callback_query.from_user.id,
                                           "–í –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –º–æ–∂–µ—à—å —á–µ–∫–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã!\n\n"
                                           "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ø–æ–º–æ—â—å¬ª. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç —Å–æ –≤—Å–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è ü•∞",
                                           reply_markup=InlineKeyboardMarkup().add(
                                               InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))
    message_ids.append(rules_message.message_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user_message_ids[callback_query.from_user.id] = message_ids


@dp.callback_query_handler(lambda c: c.data == 'channels')
async def show_channels(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    channel_message = await bot.send_message(callback_query.from_user.id,
                                             "–°–æ–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –õ–µ—Ç–Ω–µ–≥–æ –ª–∞–≥–µ—Ä—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üëáüèº\n\n"
                                             "–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏ –≤—Å—Ç—É–ø–∞–π!",
                                             reply_markup=InlineKeyboardMarkup().add(
                                                 InlineKeyboardButton("–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã",
                                                                      url='https://t.me/addlist/4hAmIl92dFk1MTQ6')
                                             ).add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user_message_ids[callback_query.from_user.id] = [channel_message.message_id]


@dp.callback_query_handler(lambda c: c.data == 'points')
async def show_points(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute("SELECT points FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        points = result[0]
    else:
        points = 0
        cursor.execute("INSERT INTO users (id, username, points) VALUES (?, ?, ?)",
                       (user_id, callback_query.from_user.username, points))
        conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    if points == 0:
        points_message = await bot.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ 0 –±–∞–ª–ª–æ–≤\n\n"
                                                                             "–ó–∞–ª–µ—Ç–∞–π –≤ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –∏ –±—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º –º–µ—Å—è—Ü–∞ –∏ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–ø–æ–≤—ã–π –ø—Ä–∏–∑",
                                                reply_markup=InlineKeyboardMarkup().add(
                                                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))
    else:
        points_message = await bot.send_message(callback_query.from_user.id, f"–ù–∞ —Ç–≤–æ—ë–º —Å—á–µ—Ç—É —É–∂–µ {points} –±–∞–ª–ª–æ–≤ üòâ\n\n"
                                                                             "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ —Ç–µ–º–ø–µ, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø–æ–≤—ã–π –ø—Ä–∏–∑",
                                                reply_markup=InlineKeyboardMarkup().add(
                                                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user_message_ids[callback_query.from_user.id] = [points_message.message_id]


@dp.callback_query_handler(lambda c: c.data == 'rating')
async def show_rating(callback_query: types.CallbackQuery):
    cursor.execute("SELECT username, points FROM users ORDER BY points DESC LIMIT 10")
    results = cursor.fetchall()

    if results:
        leaderboard = "–†–µ–π—Ç–∏–Ω–≥ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
        for i, (username, points) in enumerate(results, start=1):
            leaderboard += f"{i}. {username} - {points} –±–∞–ª–ª–æ–≤\n"
    else:
        leaderboard = "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç"

    cursor.execute("SELECT COUNT(*) FROM users WHERE points > (SELECT points FROM users WHERE id = ?)",
                   (callback_query.from_user.id,))
    position = cursor.fetchone()[0] + 1

    leaderboard += f"\n–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ {position} –º–µ—Å—Ç–µ!"

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    rating_message = await bot.send_message(callback_query.from_user.id, leaderboard,
                                            reply_markup=InlineKeyboardMarkup().add(
                                                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user_message_ids[callback_query.from_user.id] = [rating_message.message_id]


@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_button_main_menu(callback_query: types.CallbackQuery):
    message_ids = user_message_ids.get(callback_query.from_user.id, [])
    for msg_id in message_ids:
        await bot.delete_message(callback_query.from_user.id, msg_id)
    await bot.send_message(callback_query.from_user.id, "–•—ç–π! –¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é –±–æ—Ç–∞ –õ–µ—Ç–Ω–µ–≥–æ –ª–∞–≥–µ—Ä—è 100–±–∞–ª–ª—å–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ ‚òÄÔ∏è\n\n"
                         "–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ç—ã –±—ã—Å—Ç—Ä–µ–µ –≤–∫–ª—é—á–∏–ª—Å—è –≤ –∏–≥—Ä—É\n\n"
                         "–£–¥–∞—á–∏ üòâ\n\n"
                         "–í–∞–∂–Ω–æ! –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –±—ã–ª —é–∑–µ—Ä–Ω–µ–π–º, —Ç.–µ. —Ç–µ–±—è –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ ¬´@¬ª. "
                         "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–≤—è–∑–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞", reply_markup=menu_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"
@dp.callback_query_handler(lambda c: c.data == 'get_points')
async def get_points(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    points_markup = InlineKeyboardMarkup(row_width=1)
    points_markup.add(
        InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ', callback_data='send_codeword'),
        InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç', callback_data='send_post'),
        InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data='invite_friend'),
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')
    )

    points_message = await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                                            reply_markup=points_markup)
    user_message_ids[callback_query.from_user.id] = [points_message.message_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"
@dp.callback_query_handler(lambda c: c.data == 'send_codeword')
async def send_codeword(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    codeword_markup = InlineKeyboardMarkup(row_width=1)
    codeword_markup.add(
        InlineKeyboardButton('–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='execute_task'),
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='get_points')
    )

    codeword_message = await bot.send_message(callback_query.from_user.id,
                                              "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–µ–±–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üëáüèº",
                                              reply_markup=codeword_markup)
    user_message_ids[callback_query.from_user.id] = [codeword_message.message_id]

@dp.callback_query_handler(lambda c: c.data == 'execute_task')
async def execute_task(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    @dp.message_handler()
    async def check_codeword(message: types.Message):
        user_id = message.from_user.id
        codeword = message.text

        cursor.execute("SELECT points FROM codewords WHERE code = ?", (codeword,))
        result = cursor.fetchone()

        if result:
            points = result[0]
            cursor.execute("SELECT COUNT(*) FROM user_codewords WHERE user_id = ? AND code = ?", (user_id, codeword))
            count = cursor.fetchone()[0]

            if count == 0:
                cursor.execute("INSERT INTO user_codewords (user_id, code) VALUES (?, ?)", (user_id, codeword))
                cursor.execute("UPDATE users SET points = points + ? WHERE id = ?", (points, user_id))
                conn.commit()
                await message.reply(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{codeword}' –ø—Ä–∏–Ω—è—Ç–æ! –¢—ã –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤.",
                                    reply_markup=InlineKeyboardMarkup().add(
                                        InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))
            else:
                await message.reply("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.",
                                    reply_markup=InlineKeyboardMarkup().add(
                                        InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                                reply_markup=InlineKeyboardMarkup().add(
                                    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))

    execute_task_message = await bot.send_message(callback_query.from_user.id, "–û–∂–∏–¥–∞—é –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ...")
    user_message_ids[callback_query.from_user.id] = [execute_task_message.message_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "send_post"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "send_post"
@dp.callback_query_handler(lambda c: c.data == 'send_post')
async def send_post(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    with open('foto_lee/7.jpg', 'rb') as photo:  # –ó–∞–º–µ–Ω–∏—Ç–µ 'path_to_image.jpg' –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        post_message = await bot.send_photo(callback_query.from_user.id, photo,
                                            caption="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∑–∞ –ø–æ—Å—Ç, –∏–∑—É—á–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ üòâ\n\n"
                                                    "–ï—Å–ª–∏ —Ç–≤–æ–π –ø–æ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ –∏ —Ö—ç—à—Ç–µ–≥ #100–±–∞–ª–ª—å–Ω—ã–π—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä!",
                                            reply_markup=InlineKeyboardMarkup().add(
                                                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))
    user_message_ids[callback_query.from_user.id] = [post_message.message_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['photo'])
async def handle_post(message: types.Message):
    user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {message.from_user.id})"
    caption = f"{user_info}\n\n{message.caption}" if message.caption else user_info

    photo = message.photo[-1].file_id

    for admin_id in ADMIN_ID:
        await bot.send_photo(admin_id, photo, caption=caption)

    await message.reply("–§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_button_main_menu(callback_query: types.CallbackQuery):
    message_ids = user_message_ids.get(callback_query.from_user.id, [])
    for msg_id in message_ids:
        await bot.delete_message(callback_query.from_user.id, msg_id)

    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=get_admin_markup())
@dp.callback_query_handler(lambda c: c.data == 'invite_friend')
async def invite_friend(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    invite_markup = InlineKeyboardMarkup(row_width=1)
    invite_markup.add(
        InlineKeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data='generate_link'),
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='get_points')
    )

    invite_message = await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–≥—É.\n\n"
                                                                        "–í–∞–∂–Ω–æ! –ë–∞–ª–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Ç–≤–æ—ë–º —Å—á–µ—Ç—É, –µ—Å–ª–∏ –¥—Ä—É–≥ –Ω–µ –æ—Ç–ø–∏—à–µ—Ç—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π.",
                                            reply_markup=invite_markup)
    user_message_ids[callback_query.from_user.id] = [invite_message.message_id]

@dp.callback_query_handler(lambda c: c.data == 'generate_link')
async def generate_link(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    referral_code = f"ref-{random.randint(1000, 9999)}"
    cursor.execute("INSERT INTO referrals (user_id, referral_code) VALUES (?, ?)", (callback_query.from_user.id, referral_code))
    conn.commit()

    link_message = await bot.send_message(callback_query.from_user.id, f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª—ã: https://t.me/tutor_100ballniy_camp_bot?start={referral_code}\n\n"
                                                                      "–ï—ë –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ üòâ\n\n"
                                                                      "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–∏—Ç —Ç–µ–±–µ –±–∞–ª–ª—ã.",
                                         reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))
    user_message_ids[callback_query.from_user.id] = [link_message.message_id]

@dp.message_handler(commands=['start'])
async def referral_start(message: types.Message):
    if len(message.text.split()) > 1:
        referral_code = message.text.split()[1]
        user_id = message.from_user.id
        cursor.execute("SELECT user_id FROM referrals WHERE referral_code = ?", (referral_code,))
        result = cursor.fetchone()

        if result:
            referrer_id = result[0]
            cursor.execute("UPDATE users SET points = points + 150 WHERE id = ?", (referrer_id,))
            cursor.execute(
                "INSERT INTO users (id, username, points) VALUES (?, ?, 150) ON CONFLICT(id) DO UPDATE SET points = points + 150",
                (user_id, message.from_user.username))
            cursor.execute("UPDATE referrals SET invited_user_id = ?, status = 'accepted' WHERE referral_code = ?",
                           (user_id, referral_code))
            conn.commit()
            await message.reply(f"–¢—ã –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω! –ù–∞ —Ç–≤–æ–π —Å—á—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ 150 –±–∞–ª–ª–æ–≤.", reply_markup=menu_markup)
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.", reply_markup=menu_markup)
    else:
        await send_welcome(message)


@dp.callback_query_handler(lambda c: c.data == 'achievements')
async def show_achievements(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = 'foto_lee/6.jpg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
    with open(image_path, 'rb') as photo:
        achievements_message = await bot.send_photo(
            callback_query.from_user.id,
            photo,
            caption="–ì–æ–Ω–∫–∞ –∑–∞ –ø—Ä–∏–∑–∞–º–∏ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Å–∞–º–æ–º —Ä–∞–∑–≥–∞—Ä–µ!\n\n"
                    "–ß–µ–∫–∞–π –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–∏–∑—ã —Ç–µ–±—è –∂–¥—É—Ç –≤ –∏—é–ª–µ üî•",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')
            )
        )

    user_message_ids[callback_query.from_user.id] = [achievements_message.message_id]


@dp.callback_query_handler(lambda c: c.data == 'help')
async def show_help(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—à—ë–ª —Ä–µ—à–µ–Ω–∏–µ",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu'))
    )

    @dp.message_handler()
    async def handle_help_message(message: types.Message):
        for admin_id in ADMIN_ID:
            try:
                await bot.send_message(admin_id,
                                       f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:\n\n{message.text}")
            except aiogram.utils.exceptions.ChatNotFound:
                logging.error(f"Chat with admin_id {admin_id} not found")
        await message.reply("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è ü§ì",
                            reply_markup=InlineKeyboardMarkup().add(
                                InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='main_menu')))

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        dp.message_handlers.unregister(handle_help_message)


@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_button_main_menu(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é",
        reply_markup=menu_markup
    )
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message_handlers.unregister(handle_help_message)

@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_button_main_menu(callback_query: types.CallbackQuery):
    message_ids = user_message_ids.get(callback_query.from_user.id, [])
    for msg_id in message_ids:
        await bot.delete_message(callback_query.from_user.id, msg_id)
    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=menu_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "100–±–∞–ª–ª—å–Ω—ã–π –º—ç—Ç—á ‚ù§Ô∏è"
@dp.callback_query_handler(lambda c: c.data == 'match')
async def show_match(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    match_markup = InlineKeyboardMarkup(row_width=1)
    match_markup.add(
        InlineKeyboardButton('–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ', callback_data='tell_about_yourself'),
        InlineKeyboardButton('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞', callback_data='start_search'),
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')
    )

    match_message = await bot.send_message(callback_query.from_user.id,
                                           "¬´100–±–∞–ª–ª—å–Ω—ã–π –º—ç—Ç—á¬ª ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–∞—è —Ñ–∏—á–∞ –≤ –±–æ—Ç–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å–Ω—ã—Ö –¥—Ä—É–∑–µ–π!\n\n"
                                           "–ó–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º, –∞ –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ üëáüèº\n\n"
                                           "P. S. –ó–∞ —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è",
                                           reply_markup=match_markup)
    user_message_ids[callback_query.from_user.id] = [match_message.message_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ"
@dp.callback_query_handler(lambda c: c.data == 'tell_about_yourself')
async def tell_about_yourself(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    start_test_markup = InlineKeyboardMarkup(row_width=1)
    start_test_markup.add(
        InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data='start_test'),
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')
    )

    start_test_message = await bot.send_message(callback_query.from_user.id,
                                                "–°—É–ø–µ—Ä!\n\n"
                                                "–°–µ–π—á–∞—Å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç –Ω–∞–π–¥—ë—Ç —Ä–µ–±—è—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É –≤–∞—Å —Ç–æ—á–Ω–æ –º—ç—Ç—á ‚ù§Ô∏è\n\n"
                                                "–ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç, —Ç–æ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ –∏ —Ç—ã–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∞¬ª",
                                                reply_markup=start_test_markup)
    user_message_ids[callback_query.from_user.id] = [start_test_message.message_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'start_test')
async def start_test(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    age_markup = InlineKeyboardMarkup(row_width=1)
    age_markup.add(
        InlineKeyboardButton('17 –∏ –±–æ–ª—å—à–µ', callback_data='age_17_18'),
        InlineKeyboardButton('14-16', callback_data='age_14_16'),
        InlineKeyboardButton('13 –∏ –º–µ–Ω—å—à–µ', callback_data='age_13')
    )

    age_message = await bot.send_message(callback_query.from_user.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=age_markup)
    user_message_ids[callback_query.from_user.id] = [age_message.message_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('age_'))
async def handle_age(callback_query: types.CallbackQuery):
    age = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'age', age))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    class_markup = InlineKeyboardMarkup(row_width=1)
    class_markup.add(
        InlineKeyboardButton('11 –∏–ª–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫', callback_data='class_11'),
        InlineKeyboardButton('10', callback_data='class_10'),
        InlineKeyboardButton('9', callback_data='class_9'),
        InlineKeyboardButton('8 –∏ –Ω–∏–∂–µ', callback_data='class_8')
    )

    class_message = await bot.send_message(callback_query.from_user.id, "–°—É–ø–µ—Ä! –í –∫–∞–∫–æ–π –∫–ª–∞—Å—Å –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å?", reply_markup=class_markup)
    user_message_ids[callback_query.from_user.id] = [class_message.message_id]

@dp.callback_query_handler(lambda c: c.data.startswith('class_'))
async def handle_class(callback_query: types.CallbackQuery):
    class_num = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'class', class_num))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    direction_markup = InlineKeyboardMarkup(row_width=1)
    direction_markup.add(
        InlineKeyboardButton('–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–æ–µ', callback_data='direction_natural'),
        InlineKeyboardButton('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ', callback_data='direction_humanitarian'),
        InlineKeyboardButton('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', callback_data='direction_technical'),
        InlineKeyboardButton('–Ø –µ—â—ë –≤ –ø–æ–∏—Å–∫–µ —Å–µ–±—è', callback_data='direction_searching')
    )

    direction_message = await bot.send_message(callback_query.from_user.id, "–ê–≥–∞–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=direction_markup)
    user_message_ids[callback_query.from_user.id] = [direction_message.message_id]

@dp.callback_query_handler(lambda c: c.data.startswith('direction_'))
async def handle_direction(callback_query: types.CallbackQuery):
    direction = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'direction', direction))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    hobbies_markup = InlineKeyboardMarkup(row_width=1)
    hobbies_markup.add(
        InlineKeyboardButton('–ö–∏–Ω–æ, —Å–µ—Ä–∏–∞–ª—ã', callback_data='hobby_movies'),
        InlineKeyboardButton('–ö–Ω–∏–≥–∏', callback_data='hobby_books'),
        InlineKeyboardButton('–ò–≥—Ä—ã', callback_data='hobby_games'),
        InlineKeyboardButton('–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ', callback_data='hobby_none')
    )

    hobbies_message = await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ?", reply_markup=hobbies_markup)
    user_message_ids[callback_query.from_user.id] = [hobbies_message.message_id]

@dp.callback_query_handler(lambda c: c.data.startswith('hobby_'))
async def handle_hobby(callback_query: types.CallbackQuery):
    hobby = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'hobby', hobby))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    night_owl_markup = InlineKeyboardMarkup(row_width=1)
    night_owl_markup.add(
        InlineKeyboardButton('–°–æ–≤–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π –Ω–æ—á—å—é)', callback_data='night_owl'),
        InlineKeyboardButton('–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã–π —É—Ç—Ä–æ–º)', callback_data='early_bird')
    )

    night_owl_message = await bot.send_message(callback_query.from_user.id, "–¢—ã –±–æ–ª—å—à–µ...", reply_markup=night_owl_markup)
    user_message_ids[callback_query.from_user.id] = [night_owl_message.message_id]

@dp.callback_query_handler(lambda c: c.data in ['night_owl', 'early_bird'])
async def handle_night_owl(callback_query: types.CallbackQuery):
    night_owl = callback_query.data
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'night_owl', night_owl))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    sport_markup = InlineKeyboardMarkup(row_width=1)
    sport_markup.add(
        InlineKeyboardButton('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ (–∑–∞–Ω–∏–º–∞—é—Å—å!)', callback_data='sport_positive'),
        InlineKeyboardButton('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ (–Ω–µ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º)', callback_data='sport_neutral'),
        InlineKeyboardButton('–ù–µ–≥–∞—Ç–∏–≤–Ω–æ', callback_data='sport_negative')
    )

    sport_message = await bot.send_message(callback_query.from_user.id, "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Å–ø–æ—Ä—Ç—É?", reply_markup=sport_markup)
    user_message_ids[callback_query.from_user.id] = [sport_message.message_id]
@dp.callback_query_handler(lambda c: c.data.startswith('sport_'))
async def handle_sport(callback_query: types.CallbackQuery):
    sport = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'sport', sport))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    summer_markup = InlineKeyboardMarkup(row_width=1)
    summer_markup.add(
        InlineKeyboardButton('–ë–æ—Ç–∞—Ç—å!!!', callback_data='summer_study'),
        InlineKeyboardButton('–ß–∏–ª–ª–∏—Ç—å', callback_data='summer_chill')
    )

    summer_message = await bot.send_message(callback_query.from_user.id,"–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ª–µ—Ç–æ–º?", reply_markup=summer_markup)
    user_message_ids[callback_query.from_user.id] = [summer_message.message_id]

@dp.callback_query_handler(lambda c: c.data.startswith('summer_'))
async def handle_summer(callback_query: types.CallbackQuery):
    summer = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'summer', summer))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    extrovert_markup = InlineKeyboardMarkup(row_width=1)
    extrovert_markup.add(
        InlineKeyboardButton('–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç (–ª—é–±–∏—à—å –æ–±—â–∞—Ç—å—Å—è)', callback_data='extrovert'),
        InlineKeyboardButton('–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç (–ª—é–±–∏—à—å –±—ã—Ç—å –æ–¥–∏–Ω)', callback_data='introvert')
    )

    extrovert_message = await bot.send_message(callback_query.from_user.id, "–¢—ã –±–æ–ª—å—à–µ...",
                                               reply_markup=extrovert_markup)
    user_message_ids[callback_query.from_user.id] = [extrovert_message.message_id]

@dp.callback_query_handler(lambda c: c.data in ['extrovert', 'introvert'])
async def handle_extrovert(callback_query: types.CallbackQuery):
    extrovert = callback_query.data
    user_id = callback_query.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)",
                   (user_id, 'extrovert', extrovert))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    season_markup = InlineKeyboardMarkup(row_width=1)
    season_markup.add(
        InlineKeyboardButton('–û—Å–µ–Ω—å', callback_data='season_autumn'),
        InlineKeyboardButton('–í–µ—Å–Ω–∞', callback_data='season_spring'),
        InlineKeyboardButton('–ó–∏–º–∞', callback_data='season_winter'),
        InlineKeyboardButton('–õ–µ—Ç–æ', callback_data='season_summer')
    )

    season_message = await bot.send_message(callback_query.from_user.id, "–¢–≤–æ—ë –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?",
                                            reply_markup=season_markup)
    user_message_ids[callback_query.from_user.id] = [season_message.message_id]

@dp.callback_query_handler(lambda c: c.data.startswith('season_'))
async def handle_season(callback_query: types.CallbackQuery):
    season = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'season', season))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    joke_markup = InlineKeyboardMarkup(row_width=1)
    joke_markup.add(
        InlineKeyboardButton('–Ø –Ω–∞ 99 —Å–æ—Å—Ç–æ—é –∏–∑ —à—É—Ç–æ—á–µ–∫', callback_data='joke_yes'),
        InlineKeyboardButton('–û–π, —ç—Ç–æ –Ω–µ –º–æ—è —Ç–µ–º–∞', callback_data='joke_no')
    )

    joke_message = await bot.send_message(callback_query.from_user.id, "–ß–∞—Å—Ç–æ —à—É—Ç–∏—à—å? –î–µ–ª–∞–µ—à—å –º–µ–º—ã?",
                                          reply_markup=joke_markup)
    user_message_ids[callback_query.from_user.id] = [joke_message.message_id]

@dp.callback_query_handler(lambda c: c.data.startswith('joke_'))
async def handle_joke(callback_query: types.CallbackQuery):
    joke = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO user_answers (user_id, question, answer) VALUES (?, ?, ?)", (user_id, 'joke', joke))
    conn.commit()

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    final_markup = InlineKeyboardMarkup(row_width=1)
    final_markup.add(
        InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data='start_search'),
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')
    )

    final_message = await bot.send_message(callback_query.from_user.id,
                                           "–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∞ ü•∞\n\n"
                                           "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëáüèº",
                                           reply_markup=final_markup)
    user_message_ids[callback_query.from_user.id] = [final_message.message_id]

@dp.callback_query_handler(lambda c: c.data == 'start_search')
async def start_search(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT question, answer FROM user_answers WHERE user_id = ?", (user_id,))
    user_answers = cursor.fetchall()

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    matches = {}
    for question, answer in user_answers:
        cursor.execute("SELECT user_id FROM user_answers WHERE question = ? AND answer = ? AND user_id != ?",
                       (question, answer, user_id))
        results = cursor.fetchall()
        for (matched_user_id,) in results:
            if matched_user_id not in matches:
                matches[matched_user_id] = 0
            matches[matched_user_id] += 1

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 6 –∏ –±–æ–ª–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
    matched_users = [user for user, count in matches.items() if count >= 6]

    if matched_users:
        matched_usernames = []
        for matched_user_id in matched_users:
            cursor.execute("SELECT username FROM users WHERE id = ?", (matched_user_id,))
            username = cursor.fetchone()[0]
            matched_usernames.append(username)

        matched_usernames_str = "\n".join(f"{i + 1}. @{username}" for i, username in enumerate(matched_usernames))

        await bot.send_message(callback_query.from_user.id,
                               f"–ù–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–±—è—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è —Ç–æ—á–Ω—ã–π –º—ç—Ç—á!\n\n{matched_usernames_str}\n\n–°–º–µ–ª–æ –ø–∏—à–∏ –∏–º –∏ –∑–Ω–∞–∫–æ–º—å—Å—è ‚ù§Ô∏è")
    else:
        await bot.send_message(callback_query.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–æ–≥–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.")

    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=menu_markup)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_admin_markup():
    admin_markup = InlineKeyboardMarkup(row_width=1)
    admin_markup.add(
        InlineKeyboardButton('–í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã', callback_data='export_tables'),
        InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ', callback_data='broadcast_all'),
        InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data='broadcast_users'),
        InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='edit_points'),
        InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ', callback_data='add_codeword'),
        InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ', callback_data='delete_codeword'),
        InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data='show_codewords')
    )
    return admin_markup


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CodewordForm(StatesGroup):
    waiting_for_codeword = State()
    waiting_for_points = State()


class DeleteCodewordForm(StatesGroup):
    waiting_for_codeword = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(commands=['admin'])
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return

    await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_admin_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã"
@dp.callback_query_handler(lambda c: c.data == 'export_tables')
async def export_tables(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    # –í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT * FROM users")
    users_data = cursor.fetchall()
    users_df = pd.DataFrame(users_data, columns=['id', 'username', 'points'])
    users_df.to_excel('users_table.xlsx', index=False)

    # –í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT * FROM user_answers")
    answers_data = cursor.fetchall()
    answers_df = pd.DataFrame(answers_data, columns=['user_id', 'question', 'answer'])
    answers_df.to_excel('user_answers_table.xlsx', index=False)

    await bot.send_message(callback_query.from_user.id, "–¢–∞–±–ª–∏—Ü—ã –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã Excel.")
    await bot.send_document(callback_query.from_user.id, open('users_table.xlsx', 'rb'))
    await bot.send_document(callback_query.from_user.id, open('user_answers_table.xlsx', 'rb'))
    await bot.send_message(callback_query.from_user.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_admin_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ"
@dp.callback_query_handler(lambda c: c.data == 'broadcast_all')
async def broadcast_all(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–π –±–∞–∑–µ:")

    @dp.message_handler()
    async def send_broadcast(message: types.Message):
        if message.from_user.id not in ADMIN_ID:
            return

        cursor.execute("SELECT id FROM users")
        user_ids = cursor.fetchall()
        for (user_id,) in user_ids:
            try:
                await bot.send_message(user_id, message.text)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ –≤—Å–µ–π –±–∞–∑–µ.")

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        dp.message_handlers.unregister(send_broadcast)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_button_main_menu(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=menu_markup)
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message_handlers.unregister(send_broadcast)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
@dp.callback_query_handler(lambda c: c.data == 'broadcast_users')
async def broadcast_users(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id,
                           "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\nID1,ID2,...,IDN: –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    @dp.message_handler()
    async def send_broadcast_to_users(message: types.Message):
        if message.from_user.id not in ADMIN_ID:
            return

        try:
            user_ids_str, text = message.text.split(':')
            user_ids = [int(uid.strip()) for uid in user_ids_str.split(',')]
            for user_id in user_ids:
                try:
                    await bot.send_message(user_id, text.strip())
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞: {e}")


from aiogram.dispatcher.filters import Text
class EditPointsForm(StatesGroup):
    waiting_for_points = State()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
from aiogram.dispatcher import FSMContext

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@dp.callback_query_handler(lambda c: c.data == 'edit_points')
async def edit_points(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id,
                           "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\nID: –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤")
    await EditPointsForm.waiting_for_points.set()

@dp.message_handler(state=EditPointsForm.waiting_for_points)
async def update_points(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        return

    try:
        user_id, points = message.text.split(':')
        user_id = int(user_id.strip())
        points = int(points.strip())
        cursor.execute("UPDATE users SET points = ? WHERE id = ?", (points, user_id))
        conn.commit()
        await message.reply(f"–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ {points}.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞: {e}")
    finally:
        await state.finish()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message_handlers.register(update_points, content_types=types.ContentType.TEXT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_button_main_menu(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é", reply_markup=menu_markup)
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message_handlers.handlers.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ"
@dp.callback_query_handler(lambda c: c.data == 'add_codeword')
async def add_codeword(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
    await CodewordForm.waiting_for_codeword.set()


@dp.message_handler(state=CodewordForm.waiting_for_codeword)
async def process_codeword(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['codeword'] = message.text

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
    await CodewordForm.next()


@dp.message_handler(state=CodewordForm.waiting_for_points)
async def process_points(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        codeword = data['codeword']
        points = int(message.text)
        cursor.execute("INSERT INTO codewords (code, points) VALUES (?, ?)", (codeword, points))
        conn.commit()

    await message.reply(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{codeword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ {points}.",
                        reply_markup=get_admin_markup())
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ"
@dp.callback_query_handler(lambda c: c.data == 'delete_codeword')
async def delete_codeword(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await DeleteCodewordForm.waiting_for_codeword.set()


@dp.message_handler(state=DeleteCodewordForm.waiting_for_codeword)
async def process_delete_codeword(message: types.Message, state: FSMContext):
    codeword = message.text
    cursor.execute("DELETE FROM codewords WHERE code = ?", (codeword,))
    conn.commit()

    await message.reply(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{codeword}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_admin_markup())
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞"
@dp.callback_query_handler(lambda c: c.data == 'show_codewords')
async def show_codewords(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    cursor.execute("SELECT code, points FROM codewords")
    codewords = cursor.fetchall()

    if codewords:
        codewords_str = "\n".join([f"{codeword}: {points} –±–∞–ª–ª–æ–≤" for codeword,points in codewords])
        await bot.send_message(callback_query.from_user.id, f"–°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ –∏ –±–∞–ª–ª–æ–≤:\n\n{codewords_str}", reply_markup=get_admin_markup())
    else:
        await bot.send_message(callback_query.from_user.id, "–ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_markup())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)